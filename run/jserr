#! /bin/bash -u
#PBS -q mg32
#PBS -l select=16:ncpus=48:mpiprocs=4:ompthreads=12:ngpus=4
#PBS -l walltime=4:0:0
#PBS -P culb2d@PG23016
#PBS -N culb2d
#PBS -o log/
#PBS -j oe
#PBS -m ae
if [ -n "${PBS_O_WORKDIR:-}" ]; then
    cd $PBS_O_WORKDIR
fi
logfile=log/${PBS_JOBNAME:-logfile}.txt
set -o pipefail

## glocal config
rloc=1
daprune=10
d=230713_letkf_x_uv
bindiff=true ## maybe always true (for both debug and final experiment)
iodata=false ## warning: very storage-consuming, use carefully
do_nudging=false ## usually == is_beta_opt
is_skip=true
is_beta_opt=false

{ # global block for `tee`

    # modules
    . /etc/profile.d/modules.sh
    module purge
    module load mpt/2.23-ga cuda/11.0 gnu/7.4.0; export MPI_USE_CUDA=1
    module use --append $HOME/ulocal/modulefiles
    module load boost
    module load hdf5/1.8.12

    module list 2>&1

    # environmental variables
    export MPI_DSM_VERBOSE=1
    export OMP_NUM_THREADS=12

    # firstly make EigenG-Batch
    make -C src/EigenG-Batch

    env

    run () {
        N=$1
        p=$2
        beta=$3
        err_rho=$4
        err_u=$5
        iop=$daprune

        if $is_beta_opt; then
            local RESULT_DIR=result/$d/ens${N}/xyprune${p}/errrho_${err_rho}_erru${err_u}/beta_opt
        else
            local RESULT_DIR=result/$d/ens${N}/xyprune${p}/errrho_${err_rho}_erru${err_u}/beta${beta}
        fi
        mkdir -p $RESULT_DIR
        if $is_skip && [ -f "$RESULT_DIR/.complete" ]; then
            echo $RESULT_DIR: already completed. skip.
            return 0
        fi
        if $is_skip && [ -f "$RESULT_DIR/.progress" ]; then
            echo $RESULT_DIR: maybe in progress. skip.
            return 0
        fi
        touch $RESULT_DIR/.progress

        echo =============================================================================
        echo start run N=$N xyprune=$p err_rho=$err_rho err_u=$err_u beta=$beta
        echo =============================================================================

        # func
        run_mpirun() {
            mpirun -np $1 omplace run/a.out
        }


        ## config
        da_opts="DA_XYPRUNE=$p DAPRUNE=$daprune IOPRUNE=$iop OBS_ERROR_RHO=$err_rho OBS_ERROR_U=$err_u LETKF_RLOC_LEN=$rloc"

        ## obs
        make clean resultclean
        mkdir -p io/nature/ens0000 io/observed/ens0000
        make -j TEST=OBSERVE $da_opts
        run_mpirun 1
        if $bindiff && [ $p -eq 1 ]; then
            make -C bindiff test_obs
            mv -v bindiff/test/test_obs.csv $RESULT_DIR/test_obs.csv
            make -C bindiff D=RMSE_RHO test_obs
            mv -v bindiff/test/test_obs.csv $RESULT_DIR/test_rho_obs.csv
        fi
        if $iodata; then
            rsync -auv io/ $RESULT_DIR/io_obs/
            find $RESULT_DIR/io_obs/ -depth -empty -delete
        fi

        if $do_nudging; then
            ## nudging
            make clean
            mkdir -p io/calc/ens0000
            make -j TEST=DA_NUDGING $da_opts
            run_mpirun 1
            if $bindiff; then
                make -C bindiff test_calc
                mv -v bindiff/test/test_cal.csv $RESULT_DIR/test_cal_nudging.csv
                make -C bindiff D=RMSE_RHO test_calc
                mv -v bindiff/test/test_cal.csv $RESULT_DIR/test_cal_nudging_rho.csv
            fi
            if $iodata; then
                rsync -auv io/ $RESULT_DIR/io_nud/
                find $RESULT_DIR/io_nud/ -depth -empty -delete
            fi

            ## noda
            make clean
            mkdir -p io/calc/ens0000
            make -j TEST=DA_DUMMY $da_opts
            run_mpirun 1
            if $bindiff; then
                make -C bindiff test_calc
                mv -v bindiff/test/test_cal.csv $RESULT_DIR/test_cal_noda.csv
                make -C bindiff D=RMSE_RHO test_calc
                mv -v bindiff/test/test_cal.csv $RESULT_DIR/test_cal_noda_rho.csv
            fi
            if $iodata; then
                rsync -auv io/ $RESULT_DIR/io_noda/
                find $RESULT_DIR/io_noda/ -depth -empty -delete
            fi
        fi

        ## letkf
        make clean
        mkdir -p io/calc/ens{0000..1023}
        make -j TEST=DA_LETKF $da_opts LETKF_COVINF=$beta
        run_mpirun $N
        find io/calc/ -depth -empty -delete
        if $bindiff; then
            mkdir -p $RESULT_DIR/letkf$N
            make -C ensemble_stat test N=$N
            mv -v ensemble_stat/test/test_ensemble.csv $RESULT_DIR/test_letkf$N.csv
        fi
        if $iodata; then
            rsync -auv io/ $RESULT_DIR/io_letkf/
            find $RESULT_DIR/io_letkf/ -depth -empty -delete
        fi


        ## checkpoint
        rm $RESULT_DIR/.progress
        touch $RESULT_DIR/.complete
    }

    if $is_beta_opt; then
        # opt
        err_rho=0.01
        err_u=0.1
        echo beta is not opt yet >&2
        exit 1
        #run 64  1 1.1 $err_rho $err_u
        #run 64  1 1.1 $err_rho $err_u
        #run 64  2 1.1 $err_rho $err_u
        #run 64  4 1.1 $err_rho $err_u
        #run 64  8 1.1 $err_rho $err_u
        #run 64 16 1.1 $err_rho $err_u
        #run 64 32 1.1 $err_rho $err_u
        #run 64 64 1.1 $err_rho $err_u

        #run 16  1 1.1 $err_rho $err_u
        #run 16  2 1.1 $err_rho $err_u
        #run 16  4 1.1 $err_rho $err_u
        #run 16  8 1.1 $err_rho $err_u
        #run 16 16 1.1 $err_rho $err_u
        #run 16 32 1.1 $err_rho $err_u
        #run 16 64 1.1 $err_rho $err_u

        #run  4  1 1.1 $err_rho $err_u
        #run  4  2 1.1 $err_rho $err_u
        #run  4  4 1.1 $err_rho $err_u
        #run  4  8 1.1 $err_rho $err_u
        #run  4 16 1.1 $err_rho $err_u
        #run  4 32 1.1 $err_rho $err_u
        #run  4 64 1.1 $err_rho $err_u
    else
        # params scan
        bb="1 1.01 1.02 1.03 1.04 1.05 1.06 1.07 1.08 1.09 1.1 1.11 1.12 1.13 1.14 1.15 1.16 1.17 1.18 1.19 1.2 1.21 1.22 1.23 1.24 1.25 1.26 1.27 1.28 1.29 1.3 1.31 1.32 1.33 1.34 1.35 1.36 1.37 1.38 1.39 1.4 1.41 1.42 1.43 1.44 1.45 1.46 1.47 1.48 1.49 1.5"
        pp="1 2 4 8 16 32 64"
        NN="64 16 4"
        err_rho=0.01
        err_u=0.1
        for N in $NN; do for beta in $bb; do for p in $pp; do
            run $N $p $beta $err_rho $err_u
        done done done
    fi

} |& tee $logfile
